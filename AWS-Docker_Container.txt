{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "DevSecOps Pipeline to continuous deploy code from GitHub to the Cloud.  Utilizing Amazon Web Services code deploy example as a base template",
  "Parameters": {
    "JenkinsInstanceType": {
      "Description": "EC2 instance type for the Jenkins Server",
      "Type": "String",
      "Default": "t3.medium",
      "AllowedValues": [
        "t3.nano",
        "t3.micro",
        "t3.small",
        "t3.medium"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to Jenkins Server",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "VpcId": {
      "Description": "The VPC Id where the EC2 instances will be launched.",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "must be the name of an existing VPC."
    },
    "YourIPRange": {
      "Description": "CIDR block of the network from where you will connect to the Jenkins server using HTTP and SSH",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnet1": {
      "Description": "The first public subnet where the Jenkins EC2 instance, ELB and Web Servers will be launched",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "Must be a valid Public VPC Subnet."
    },
    "PublicSubnet2": {
      "Description": "The second public subnet where the ELB and Web Servers will be launched",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "Must be a valid Public VPC Subnet."
    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "AMI": "ami-04681a1dbd79675a5"
      }
    }
  },
  "Resources": {
    "CodeBuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codebuild.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "CodeBuildRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeBuildRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:PutObject"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeBuildRole"
          }
        ]
      }
    },
    "JenkinsServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "Comment": "Install Jenkins, nginx and the Jenkins CodeDeploy plugin",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "install_all": [
              "install_base",
              "install_nginx"
            ]
          },
          "install_base": {
            "packages": {
              "yum": {
                "git": []
              }
            }
          },
          "install_nginx": {
            "packages": {
              "yum": {
                "nginx": []
              }
            },
            "files": {
              "/etc/nginx/nginx.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "user  nginx;\n",
                      "worker_processes  1;\n\n",
                      "error_log  /var/log/nginx/error.log;\n",
                      "pid        /var/run/nginx.pid;\n\n",
                      "events {\n",
                      "    worker_connections  1024;\n",
                      "}\n\n",
                      "http {\n",
                      "    include       /etc/nginx/mime.types;\n",
                      "    default_type  application/octet-stream;\n",
                      "    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n",
                      "                      '$status $body_bytes_sent \"$http_referer\" '\n",
                      "                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n",
                      "    access_log  /var/log/nginx/access.log  main;\n",
                      "    sendfile        on;\n",
                      "    keepalive_timeout  65;\n",
                      "    include /etc/nginx/conf.d/*.conf;\n",
                      "    index   index.html index.htm;\n",
                      "    server {\n",
                      "        listen       80;\n",
                      "        server_name  _;\n",
                      "        location / {\n",
                      "          proxy_pass              http://127.0.0.1:8080;\n",
                      "          proxy_set_header        Host $host;\n",
                      "          proxy_set_header        X-Real-IP $remote_addr;\n",
                      "          proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n",
                      "          proxy_connect_timeout   150;\n",
                      "          proxy_send_timeout      100;\n",
                      "          proxy_read_timeout      100;\n",
                      "          proxy_buffers           4 32k;\n",
                      "          client_max_body_size    8m;\n",
                      "          client_body_buffer_size 128k;\n",
                      "        }\n",
                      "        location /password.txt {\n",
                      "          alias              /web/initalpass.html;\n",
                      "        }\n",
                      "   }\n",
                      "}\n"
                    ]
                  ]
                }
              }
            },
            "mode": "000444",
            "owner": "root",
            "group": "root"
          }
        },
        "services": {
          "sysvinit": {
            "nginx": {
              "enabled": "true",
              "ensureRunning": "true",
              "files": [
                "/etc/nginx/nginx.conf"
              ]
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "JenkinsSecurityGroup"
              }
            ],
            "SubnetId": {
              "Ref": "PublicSubnet1"
            }
          }
        ],
        "InstanceType": {
          "Ref": "JenkinsInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "JenkinsInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "amazon-linux-extras install epel\n",
                "sudo yum install -y aws-cfn-bootstrap\n",
                "sudo mkdir /web\n",
                "/opt/aws/bin/cfn-init -v ",
                " --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource JenkinsServer ",
                " --configsets install_all ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Install Jenkins SonarQube and Java8\n",
                "sudo yum install wget -y\n",
                "sudo wget -O /tmp/sonarqube-5.6.7.zip https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-5.6.7.zip\n",
                "sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\n",
                "sudo unzip /tmp/sonarqube-5.6.7.zip -d /opt/\n",
                "sudo rm /tmp/sonarqube-5.6.7.zip\n",
                "sudo mv /opt/sonarqube-5.6.7 /opt/sonarqube\n",
                "sudo chown ec2-user:ec2-user /opt/sonarqube -Rf\n",
                "sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\n",
                "sudo yum install java-1.8.0-openjdk -y\n",
                "sudo yum update -y\n",
                "sudo yum install jenkins -y\n",
                "sudo service jenkins start\n",
                "sudo chkconfig jenkins on\n",
                "# Update the AWS CLI to the latest version\n",
                "sudo yum update -y aws-cli\n",
                "# Wait 30 seconds to allow Jenkins to startup\n",
                "echo \"Waiting 30 seconds for Jenkins to start.....\"\n",
                "sleep 30\n",
                "## Nginx setup\n",
                "service nginx restart\n",
                "# Restart Jenkins Service\n",
                "/etc/init.d/jenkins restart\n",
                "sleep 60\n",
                "sudo /opt/sonarqube/bin/linux-x86-64/sonar.sh start\n",
                "cp /var/lib/jenkins/secrets/initialAdminPassword /web/initalpass.html \n",
                "chown nginx:nginx /web/initalpass.html \n",
                "# Configure AWS CLI and GIT for jenkins user\n",
                "sudo su - jenkins --shell /bin/bash -c \"aws configure set region us-east-1\" \n",
                "sudo su - jenkins --shell /bin/bash -c \"aws configure set output json\" \n",
                "#until [ -f /var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion ]; do   sleep 5; service jenkins restart; done\n",
                "while [ ! -f /var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion ]; do echo waiting for jenkins to finish setup; sleep 10; done; service jenkins restart\n",
                "\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Jenkins Server"
          }
        ]
      }
    },
    "JenkinsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH and HTTP access from specific CIDR block",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "YourIPRange"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "YourIPRange"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": {
              "Ref": "YourIPRange"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9000",
            "ToPort": "9000",
            "CidrIp": {
              "Ref": "YourIPRange"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ELBSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access from anywhere",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9000",
            "ToPort": "9000",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "JenkinsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "JenkinsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "JenkinsRole"
          }
        ]
      }
    },
    "JenkinsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "JenkinsPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:PutObject",
                "s3:DeleteObject"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:ListApplications",
                "codedeploy:ListDeploymentGroups",
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeploymentConfig",
                "codedeploy:GetApplicationRevision",
                "codedeploy:GetDeployment"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "JenkinsRole"
          }
        ]
      }
    },
    "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": "codedeploy.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:Describe*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "Tag:getResources",
                "Tag:getTags",
                "Tag:getTagsForResource",
                "Tag:getTagsForResourceList"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustRole"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "TCP:8080",
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        },
        "Listeners": [
          {
            "InstancePort": "8080",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "PolicyNames": []
          },
          {
            "InstancePort": "9000",
            "LoadBalancerPort": "9000",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "PolicyNames": []
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ELBSG"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ELBDNSName": {
      "Description": "DNS Name of the ELB",
      "Value": {
        "Fn::GetAtt": [
          "ELB",
          "DNSName"
        ]
      }
    },
    "JenkinsServerDNSName": {
      "Description": "DNS Name of Jenkins Server",
      "Value": {
        "Fn::GetAtt": [
          "JenkinsServer",
          "PublicDnsName"
        ]
      }
    }
  }
}